给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。

示例 1：

输入：nums1 = [1,3], nums2 = [2]
输出：2.00000
解释：合并数组 = [1,2,3] ，中位数 2

示例 2：

输入：nums1 = [1,2], nums2 = [3,4]
输出：2.50000
解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5

示例 3：

输入：nums1 = [0,0], nums2 = [0,0]
输出：0.00000

示例 4：

输入：nums1 = [], nums2 = [1]
输出：1.00000

示例 5：

输入：nums1 = [2], nums2 = []
输出：2.00000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/median-of-two-sorted-arrays
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
###################################################################
自己的解法：（完美通过）

class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        total_list = nums1 + nums2
        total_list.sort() # 数组排列
        # length_list = len(total_list_sort)
        count = 0 
        for num in total_list:
            count += 1 # 计算数组的长度（包含几个数）

        if count % 2 == 0:
            # output = float((total_list[count/2 - 1] + total_list[count/2]) / 2)
            output = (float(total_list[count/2 - 1]) + float(total_list[count/2])) / 2 # 如果数组的元素数量为偶数
        else:
            output = float(total_list[count/2]) # 奇数数组

        return output
